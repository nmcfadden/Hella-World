	////////////////////////////////////////////////////////////////////////////////////////
	// Get nist material manager
  G4NistManager* nist = G4NistManager::Instance();
  // Option to switch on/off checking of volumes overlaps
 // G4double LAr_Energy[7]= { 8.906 ,  9.161 ,  9.415 ,  9.670 ,  9.925 ,  10.180 ,  10.435};
  
  G4Material* mat_vacuum = nist->FindOrBuildMaterial("G4_Galactic");//
  G4Material* mat_air = nist->FindOrBuildMaterial("G4_AIR");
  G4Material* mat_GeNat = nist->FindOrBuildMaterial("G4_Ge");
	G4Material* mat_Cu = nist->FindOrBuildMaterial("G4_Cu");
	G4Material* mat_Pb = nist->FindOrBuildMaterial("G4_Pb");
	G4Material* mat_N = nist->FindOrBuildMaterial("G4_N");
	G4Material* mat_Ar = nist->FindOrBuildMaterial("G4_Ar");
	G4Material* mat_Water = nist->FindOrBuildMaterial("G4_WATER");
  G4Material* mat_Silicon = nist->FindOrBuildMaterial("G4_Si");
  G4Material* mat_Oxygen = nist->FindOrBuildMaterial("G4_O");
  G4Material* mat_Uranium = nist->FindOrBuildMaterial("G4_U");
  G4Material* mat_Thorium = nist->FindOrBuildMaterial("G4_Th");
  G4Material* mat_Potassium = nist->FindOrBuildMaterial("G4_K");
  
  double z,a,density;
  
  //Glass
  fH = new G4Element("H", "H", z=1., a=1.01*g/mole);
  fC = new G4Element("C", "C", z=6., a=12.01*g/mole);
  fN = new G4Element("N", "N", z=7., a= 14.01*g/mole);
  fO = new G4Element("O"  , "O", z=8., a= 16.00*g/mole);

  fGlass = new G4Material("Glass", 1.032*g/cm3,2);
  fGlass->AddElement(fC,91.533*perCent);
  fGlass->AddElement(fH,8.467*perCent);
  
  //the glass properties must be improved, para are guessed atm
 /* G4double glass_RIND[]={1.56,1.57,1.58,1.59,1.60,1.61,1.62};
  assert(sizeof(glass_RIND) == sizeof(LAr_Energy));
  G4double glass_AbsLength[]={420.*cm,420.*cm,420.*cm,420.*cm,420.*cm,420.*cm,420.*cm};
  assert(sizeof(glass_AbsLength) == sizeof(LAr_Energy));
  G4MaterialPropertiesTable *glass_mt = new G4MaterialPropertiesTable();
  glass_mt->AddProperty("ABSLENGTH",LAr_Energy,glass_AbsLength,7);
  glass_mt->AddProperty("RINDEX",LAr_Energy,glass_RIND,7);
  fGlass->SetMaterialPropertiesTable(glass_mt);*/
  /// Optical properties of the PMT glass: 
  const G4int num_entries = 24;
  G4double PMTGlassEnergy[num_entries] = {
            LambdaE/(115*nanometer), LambdaE /(160.8*nanometer), LambdaE /(170*nanometer), LambdaE /(182.3*nanometer), LambdaE /(200*nanometer), 
					  LambdaE/(230*nanometer), LambdaE /(250*nanometer), LambdaE /(270*nanometer), LambdaE /(300*nanometer), LambdaE /(320*nanometer),
					  LambdaE/(340*nanometer), LambdaE /(360*nanometer), LambdaE /(380*nanometer), LambdaE /(400*nanometer), LambdaE /(450*nanometer),
					  LambdaE/(500*nanometer), LambdaE /(550*nanometer), LambdaE /(580*nanometer), LambdaE /(600*nanometer), LambdaE /(630*nanometer),
					  LambdaE/(660*nanometer), LambdaE /(700*nanometer), LambdaE /(730*nanometer), LambdaE /(750*nanometer)};  
  G4double PMTGlassReflectivity[num_entries] = {0.0,0.0,0.0,0.0,0.0,
						0.0,0.0,0.0,0.0,0.0,
						0.0,0.0,0.0,0.0,0.0,
						0.0,0.0,0.0,0.0};
  G4double PMTGlassEfficiency[num_entries] = {0.0000,0.0034,0.0322,0.0741,0.1297,
					      0.1450,0.1673,0.1965,0.2348,0.2473,
					      0.2467,0.2399,0.2368,0.2264,0.1847,
					      0.1309,0.0692,0.0371,0.0231,0.0104,
					      0.0036,0.0006,0.0001,0.0000}; 
  
  fPMTGlassOptTable = new G4MaterialPropertiesTable();
  fPMTGlassOptTable->AddProperty("REFLECTIVITY",PMTGlassEnergy,PMTGlassReflectivity,num_entries);
  fPMTGlassOptTable->AddProperty("EFFICIENCY",PMTGlassEnergy,PMTGlassEfficiency,num_entries);
  
  fGlass->SetMaterialPropertiesTable(fPMTGlassOptTable);
  
  fPMTGlassOptSurface = new G4OpticalSurface("LArInstrPMTGlassSurface",glisur,polished,dielectric_metal);
  fPMTGlassOptSurface->SetMaterialPropertiesTable(fPMTGlassOptTable);
  
  fAl = new G4Material("Al",z=13.,a=26.98*g/mole,density=2.7*g/cm3);

  G4Material* mat_Rock= new G4Material("Rock", 2.86 * g / cm3, 5);
  G4double sum_minors = 0.22/1000000. + 0.33/1000000. + 0.96/100.;
  mat_Rock->AddMaterial(mat_Silicon, 1./3.*(1-sum_minors));
  mat_Rock->AddMaterial(mat_Oxygen, 2./3.*(1-sum_minors));
  mat_Rock->AddMaterial(mat_Uranium, 0.22/1000000.);
  mat_Rock->AddMaterial(mat_Thorium, 0.33/1000000.);
  mat_Rock->AddMaterial(mat_Potassium, 0.96/100.);


	G4Isotope* iso_Ge70 = new G4Isotope("Germanium70", 32, 70, 69.9243 * g / mole);
  G4Isotope* iso_Ge72 = new G4Isotope("Germanium72", 32, 72, 71.9221 * g / mole);
  G4Isotope* iso_Ge73 = new G4Isotope("Germanium73", 32, 73, 72.9235 * g / mole);
  G4Isotope* iso_Ge74 = new G4Isotope("Germanium74", 32, 74, 73.9212 * g / mole);
  G4Isotope* iso_Ge76 = new G4Isotope("Germanium76", 32, 76, 75.9214 * g / mole);

  G4Element* ele_Ge = new G4Element("Germanium", "Ge", 2);
  ele_Ge->AddIsotope(iso_Ge74, 0.14);
	ele_Ge->AddIsotope(iso_Ge76, 0.86);

  G4Material* mat_GeEnr = new G4Material("GermaniumEnriched", 5.323*g/cm3, 1);
  mat_GeEnr->AddElement(ele_Ge, 1);



	mat_NCold = new G4Material("NitrogenCold",0.001251*293/80.*g/cm3, 1, kStateGas, 80.0*kelvin, 1.0*bar);
	mat_NCold->AddMaterial(mat_N,1);
	mat_NLiq = new G4Material("NitrogenLiquid", 0.808*g/cm3, 1, kStateLiquid, 80.0*kelvin, 1.0*bar);
	mat_NLiq->AddMaterial(mat_N,1);

	mat_ArCold = new G4Material("ArgonCold",0.001784*293/87.*g/cm3, 1, kStateGas, 87.0*kelvin, 1.0*bar);
	mat_ArCold->AddMaterial(mat_Ar,1);
	mat_ArLiq = new G4Material("ArgonLiquid", 1.3954*g/cm3, 1, kStateLiquid, 87.0*kelvin, 1.0*bar);
	mat_ArLiq->AddMaterial(mat_Ar,1);



	////////////////////////////////////////////////////////////////////////////////////////
	G4Material* mat_Detector = mat_GeEnr;
	//G4Material* mat_FillGas;//should be defined in header

	//Vacuum ArgonLiquid ArgonGas NitrogenLiquid NitrogenGas
	if (innerVessel_FillMaterial.contains("NitrogenGas")) mat_fillGas	= mat_NCold;
	else if (innerVessel_FillMaterial.contains("NitrogenLiquid")) mat_fillGas	= mat_NLiq;
	else if (innerVessel_FillMaterial.contains("ArgonGas")) mat_fillGas	= mat_ArCold;
	else if (innerVessel_FillMaterial.contains("ArgonLiquid")) mat_fillGas	= mat_ArLiq;
	else mat_fillGas = mat_vacuum;


	G4cout << "----------------------------" << G4endl;
	G4cout << "Material in inner vessel is " << mat_fillGas->GetName() << G4endl;
	G4cout << "Temperature: "                << mat_fillGas->GetTemperature() << G4endl;
	G4cout << "State: "                      << mat_fillGas->GetState() << G4endl;
	G4cout << "Density: "                    << mat_fillGas->GetDensity() / (g/cm3) << " g/cm3 " << G4endl;
	G4cout << "----------------------------" << G4endl;

  //Polystyrene
  
  fPstyrene = new G4Material("Polystyrene", /*density=*/ 1.03*g/cm3, 2);
  fPstyrene->AddElement(fC, 8);
  fPstyrene->AddElement(fH, 8);

  G4double wls_Energy[] = {2.00*eV,2.87*eV,2.90*eV,3.47*eV};
  const G4int wlsnum = sizeof(wls_Energy)/sizeof(G4double);
 
  G4double rIndexPstyrene[]={ 1.5, 1.5, 1.5, 1.5};
  G4double absorption1[]={2.*cm, 2.*cm, 2.*cm, 2.*cm};
  G4double scintilFast[]={0.00, 0.00, 1.00, 1.00};
  fMPTPStyrene = new G4MaterialPropertiesTable();
  fMPTPStyrene->AddProperty("RINDEX",wls_Energy,rIndexPstyrene,wlsnum);
  fMPTPStyrene->AddProperty("ABSLENGTH",wls_Energy,absorption1,wlsnum);
  fMPTPStyrene->AddProperty("FASTCOMPONENT",wls_Energy, scintilFast,wlsnum);
  fMPTPStyrene->AddConstProperty("SCINTILLATIONYIELD",10./keV);
  fMPTPStyrene->AddConstProperty("RESOLUTIONSCALE",1.0);
  fMPTPStyrene->AddConstProperty("FASTTIMECONSTANT", 10.*ns);
  fPstyrene->SetMaterialPropertiesTable(fMPTPStyrene);

  fPstyrene->GetIonisation()->SetBirksConstant(0.126*mm/MeV);

